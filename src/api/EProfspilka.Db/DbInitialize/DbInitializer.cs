using EProfspilka.Core.Entities;
using EProfspilka.Core.Enumerations;
using EProfspilka.Db.EF;
using Role = EProfspilka.Core.Enumerations.Role;

namespace EProfspilka.Db.DbInitialize;

public static class DbInitializer
{
    public static void Seed(EProfspilkaContext db)
    {
        SeedDefaultAdvantages(db);
        SeedDefaultQuestions(db);
        SeedDiscounts(db);
        SeedSuperAdmin(db);

        db.SaveChanges();
    }

    private static void SeedDefaultAdvantages(EProfspilkaContext db)
    {
        if (db.Advantage.Any())
        {
            return;
        }

        var advantages = new List<Advantage>
        {
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–ë–∞–ª–∏",
                SubText = "–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±–∞–ª–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–ï–∫–æ–Ω–æ–º—ñ—è",
                SubText = "–≤–ª–∞—Å–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ¬´–ü—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–æ—ó id –∫–∞—Ä—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ß–ù–£¬ª",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫",
                SubText = "–¥–µ—à–µ–≤–∏–π –ª—ñ—Ç–Ω—ñ–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –Ω–∞ –º–æ—Ä—ñ —Ç–∞ –≤ –≥–æ—Ä–∞—Ö",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–°—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è",
                SubText = "—Ü—ñ–∫–∞–≤–µ —Ç–∞ –Ω–µ–∑–∞–±—É—Ç–Ω—î —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è (–ü–æ—Å–≤—è—Ç–∏, –∫–æ–Ω–∫—É—Ä—Å–∏, –≤–µ—á—ñ—Ä–∫–∏ —Ç–∞ —ñ–Ω.)",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–ù–∞–≥–æ—Ä–æ–¥–∏",
                SubText = "–ø—Ä–µ–º—ñ—é–≤–∞–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä–æ–º–∞–¥—Å—å–∫–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–†–æ–±–æ—Ç–∞",
                SubText = "–ø–æ—à—É–∫ —Ä–æ–±–æ—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Å–ª—É–≥ ¬´–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å—å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É –∫–∞—Ä‚Äô—î—Ä–∏¬ª",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–î–æ–ø–æ–º–æ–≥–∞",
                SubText = "–∑–∞—Ö–∏—Å—Ç –ø—Ä–∞–≤ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—ó –¥–æ–ø–æ–º–æ–≥–∏",
            },
            new()
            {
                Id = Guid.NewGuid(),
                MainText = "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è",
                SubText = "—Å–∞–º–æ—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —É –∫–æ–º—ñ—Å—ñ—è—Ö —Ç–∞ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∞—Ö –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É",
            },
        };

        db.Advantage.AddRange(advantages);
    }

    private static void SeedDefaultQuestions(EProfspilkaContext db)
    {
        if (db.Questions.Any())
        {
            return;
        }

        var questions = new List<Question>
        {
            new()
            {
                Id = Guid.NewGuid(),
                QuestionText = "–•—Ç–æ —Ç–∞–∫–∏–π –ø—Ä–æ—Ñ–æ—Ä–≥?",
                Answer =
                    "–ü—Ä–æ—Ñ–æ—Ä–≥ ‚Äì —Ü–µ –æ–±—Ä–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ —É –∞–∫–∞–¥–µ–º—ñ—á–Ω—ñ–π –≥—Ä—É–ø—ñ. –ü—Ä–æ—Ñ–≥—Ä—É–ø–æ—Ä–≥ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ—é —Ä–æ–±–æ—Ç—É –ø—ñ–¥ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ–º –≥–æ–ª–æ–≤–∏ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/—ñ–Ω—Å—Ç–∏—Ç—É—Ç—É/–∫–æ–ª–µ–¥–∂—É (–ø—Ä–æ—Ñ–±—é—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤). –ü—Ä–æ—Ñ–≥—Ä—É–ø–æ—Ä–≥ –æ–±–∏—Ä–∞—î—Ç—å—Å—è —Å–µ—Ä–µ–¥ —á–ª–µ–Ω—ñ–≤ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ –≥—Ä—É–ø–∏ –Ω–∞ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏—Ö –∑–±–æ—Ä–∞—Ö –≥—Ä—É–ø–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ –Ω–µ –º–µ–Ω—à–µ –¥–≤–æ—Ö —Ç—Ä–µ—Ç–∏–Ω —á–ª–µ–Ω—ñ–≤ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ –≥—Ä—É–ø–∏ —Ç–µ—Ä–º—ñ–Ω–æ–º –Ω–∞ 1 —Ä—ñ–∫.",
            },
            new()
            {
                Id = Guid.NewGuid(),
                QuestionText = "–•—Ç–æ —Ç–∞–∫–∏–π –ø—Ä–æ—Ñ–æ—Ä–≥?",
                Answer =
                    "–ü—Ä–æ—Ñ–æ—Ä–≥ ‚Äì —Ü–µ –æ–±—Ä–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ —É –∞–∫–∞–¥–µ–º—ñ—á–Ω—ñ–π –≥—Ä—É–ø—ñ. –ü—Ä–æ—Ñ–≥—Ä—É–ø–æ—Ä–≥ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ—é —Ä–æ–±–æ—Ç—É –ø—ñ–¥ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ–º –≥–æ–ª–æ–≤–∏ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/—ñ–Ω—Å—Ç–∏—Ç—É—Ç—É/–∫–æ–ª–µ–¥–∂—É (–ø—Ä–æ—Ñ–±—é—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤). –ü—Ä–æ—Ñ–≥—Ä—É–ø–æ—Ä–≥ –æ–±–∏—Ä–∞—î—Ç—å—Å—è —Å–µ—Ä–µ–¥ —á–ª–µ–Ω—ñ–≤ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ –≥—Ä—É–ø–∏ –Ω–∞ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–æ–≤–∏—Ö –∑–±–æ—Ä–∞—Ö –≥—Ä—É–ø–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –∑–∞—Å—ñ–¥–∞–Ω–Ω—ñ –Ω–µ –º–µ–Ω—à–µ –¥–≤–æ—Ö —Ç—Ä–µ—Ç–∏–Ω —á–ª–µ–Ω—ñ–≤ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏ –≥—Ä—É–ø–∏ —Ç–µ—Ä–º—ñ–Ω–æ–º –Ω–∞ 1 —Ä—ñ–∫.",
            },
        };

        db.Questions.AddRange(questions);
    }

    private static void SeedDiscounts(EProfspilkaContext db)
    {
        if (db.Discounts.Any())
            return;

        var discounts = new List<Discount>()
        {
            new()
            {
                Id = Guid.NewGuid(),
                AccessTypes = DiscountAccessType.QRCode | DiscountAccessType.PromoCode,
                CreatedDateUtc = DateTime.UtcNow,
                DiscountType = DiscountType.AvailableForAll,
                Description = "–Ø–∫—â–æ –≤–∏ –ª—é–±–∏—Ç–µ –≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏, —Ü—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Å–∞–º–µ –¥–ª—è –≤–∞—Å!",
                Name = "–ó–Ω–∏–∂–∫–∞ 20% –Ω–∞ –ª–∞—Ç–µ –≤—ñ–¥ Bacara Coffe‚ù§Ô∏è‚Äçüî•",
                State = DiscountState.Active,
                PromoCode = "PROFSPILKABACARA20",
            },
            new()
            {
                Id = Guid.NewGuid(),
                AccessTypes = DiscountAccessType.QRCode | DiscountAccessType.PromoCode,
                CreatedDateUtc = DateTime.UtcNow,
                DiscountType = DiscountType.OneTimeForMembers,
                Description = "–©–ï –ë–Ü–õ–¨–®–ï –ö–ê–í–ò! –Ø–∫—â–æ –≤–∏ –ª—é–±–∏—Ç–µ –≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏, —Ü—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —Å–∞–º–µ –¥–ª—è –≤–∞—Å! Bacara Coffe –¥–∞—Ä—É—î –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É –∑–Ω–∏–∂–∫—É –≤ 40% –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–ª–µ–Ω–∞ –ø—Ä–æ—Ñ—Å–ø—ñ–ª–∫–∏!",
                Name = "–ó–Ω–∏–∂–∫–∞ 40% –Ω–∞ –ª–∞—Ç–µ –≤—ñ–¥ Bacara Coffe",
                State = DiscountState.Active,
                PromoCode = "PROFSPILKABACARA40",
            }
        };

        db.Discounts.AddRange(discounts);
        db.SaveChanges();
    }

    private static void SeedSuperAdmin(EProfspilkaContext db)
    {
        if (db.Users.Any())
        {
            return;
        }

        var adminId = Guid.NewGuid();

        var admin = new User
        {
            Id = adminId,
            Email = "marianchuk.maksym@chnu.edu.ua",
            Faculty = "–§–ú–Ü",
            Image = new() { Id = Guid.NewGuid(), ImageUrl = "https://lh3.googleusercontent.com/a/ACg8ocKRehp3a4owyAgaI_uiQgJ6xbVmcOf-VugDuo7XnJXoKw=s576-c-no" },
            FullName = "–ú–∞–∫—Å–∏–º –í–∞—Å–∏–ª—å–æ–≤–∏—á –ú–∞—Ä'—è–Ω—á—É–∫",
            UserRoles =
            [
                new UserRole
                {
                    UserId = adminId,
                    RoleId = Role.Admin,
                    CreatedAtUtc = DateTime.UtcNow,
                    UpdatedAtUtc = DateTime.UtcNow,
                },
                new UserRole
                {
                    UserId = adminId,
                    RoleId = Role.Student,
                    CreatedAtUtc = DateTime.UtcNow,
                    UpdatedAtUtc = DateTime.UtcNow,
                },
                new UserRole
                {
                    UserId = adminId,
                    RoleId = Role.Member,
                    CreatedAtUtc = DateTime.UtcNow,
                    UpdatedAtUtc = DateTime.UtcNow,
                }
            ],
        };

        var discounts = db.Discounts.Where(d => d.State == DiscountState.Active).Select(d => d.Id).ToList();
        var adminDiscounts = new List<UserDiscounts>();
        
        foreach (var id in discounts)
        {
            adminDiscounts.Add(
                new UserDiscounts
                {
                    DiscountId = id,
                    UserId = adminId,
                    CreatedDateUtc = DateTime.UtcNow,
                    IsAvailable = true,
                    UsedCount = 0,
                });
        }

        db.Users.Add(admin);
        db.UserDiscounts.AddRange(adminDiscounts);
    }
}